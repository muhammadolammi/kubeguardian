# ai-agent-deployment.yaml
apiVersion: apps/v1
kind: Deployment

metadata:
  name: agent
spec:
  replicas: 1
  selector:
    matchLabels:
      app: agent
  template:
    metadata:
      labels:
        app: agent
    spec:
      containers:
      - name: agent
        image:  muhammadolammi/kubeguardian-agent
        resources:
          requests:
            cpu: "500m"
            memory: "256Mi"
          limits:
            cpu: "1"
            memory: "1Gi" 

        ports: 
          - containerPort: 8081 
        env:
          - name: KUBECTL_AI_MCP_SERVER
            valueFrom:
              secretKeyRef:
                name: kubeguardian-secrets
                key: KUBECTL_AI_MCP_SERVER
          - name: CRYPT_KEY
            valueFrom:
              secretKeyRef:
                name: kubeguardian-secrets
                key: CRYPT_KEY
         
          - name: GEMINI_API_KEY
            valueFrom:
              secretKeyRef:
                name: kubeguardian-secrets
                key: GEMINI_API_KEY
          - name: AUTHORIZED_DIRECTORY
            value: /app/apps/bank-of-anthos/kubernetes-manifests
          - name: AUTHORIZED_NAMESPACE
            value: bank-of-anthos 
          - name: MCP_SERVER
            valueFrom:
              secretKeyRef:
                name: kubeguardian-secrets
                key: MCP_SERVER
          - name: DB_URL
            valueFrom:
              secretKeyRef:
                name: kubeguardian-secrets
                key: DB_URL


--- 

# ai-agent-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: agent
spec:
  selector:
    app: agent
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
  type: ClusterIP



import httpx
import asyncio

async def test_sse():
    url = "http://mcp-server:8086/mcp"
    try:
        async with httpx.AsyncClient(timeout=None) as client:
            async with client.stream("GET", url) as response:
                print("Status:", response.status_code)
                # Read first few lines from the stream
                async for line in response.aiter_lines():
                    if line.strip() == "":
                        continue
                    print("Received:", line)
                    # Stop after first few events for testing
                    break
    except Exception as e:
        print("Error:", e)

asyncio.run(test_sse())
